#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyFinance.Core
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyFinance")]
	public partial class MyFinanceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDistributionPercentage(DistributionPercentage instance);
    partial void UpdateDistributionPercentage(DistributionPercentage instance);
    partial void DeleteDistributionPercentage(DistributionPercentage instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertDistributionRule(DistributionRule instance);
    partial void UpdateDistributionRule(DistributionRule instance);
    partial void DeleteDistributionRule(DistributionRule instance);
    partial void InsertFund(Fund instance);
    partial void UpdateFund(Fund instance);
    partial void DeleteFund(Fund instance);
    partial void InsertProfit(Profit instance);
    partial void UpdateProfit(Profit instance);
    partial void DeleteProfit(Profit instance);
    partial void InsertReserve(Reserve instance);
    partial void UpdateReserve(Reserve instance);
    partial void DeleteReserve(Reserve instance);
    #endregion
		
		public MyFinanceDataContext() : 
				base(global::MyFinance.Core.Properties.Settings.Default.MyFinanceConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MyFinanceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyFinanceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyFinanceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MyFinanceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DistributionPercentage> DistributionPercentages
		{
			get
			{
				return this.GetTable<DistributionPercentage>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<DistributionRule> DistributionRules
		{
			get
			{
				return this.GetTable<DistributionRule>();
			}
		}
		
		public System.Data.Linq.Table<Fund> Funds
		{
			get
			{
				return this.GetTable<Fund>();
			}
		}
		
		public System.Data.Linq.Table<Profit> Profits
		{
			get
			{
				return this.GetTable<Profit>();
			}
		}
		
		public System.Data.Linq.Table<Reserve> Reserves
		{
			get
			{
				return this.GetTable<Reserve>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DistributionPercentage")]
	public partial class DistributionPercentage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReserveID;
		
		private System.Nullable<int> _FundID;
		
		private decimal _Percentage;
		
		private int _DistributionRuleId;
		
		private EntityRef<DistributionRule> _DistributionRule;
		
		private EntityRef<Fund> _Fund;
		
		private EntityRef<Reserve> _Reserve;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReserveIDChanging(int value);
    partial void OnReserveIDChanged();
    partial void OnFundIDChanging(System.Nullable<int> value);
    partial void OnFundIDChanged();
    partial void OnPercentageChanging(decimal value);
    partial void OnPercentageChanged();
    partial void OnDistributionRuleIdChanging(int value);
    partial void OnDistributionRuleIdChanged();
    #endregion
		
		public DistributionPercentage()
		{
			this._DistributionRule = default(EntityRef<DistributionRule>);
			this._Fund = default(EntityRef<Fund>);
			this._Reserve = default(EntityRef<Reserve>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReserveID", DbType="Int NOT NULL")]
		public int ReserveID
		{
			get
			{
				return this._ReserveID;
			}
			set
			{
				if ((this._ReserveID != value))
				{
					if (this._Reserve.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReserveIDChanging(value);
					this.SendPropertyChanging();
					this._ReserveID = value;
					this.SendPropertyChanged("ReserveID");
					this.OnReserveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundID", DbType="Int")]
		public System.Nullable<int> FundID
		{
			get
			{
				return this._FundID;
			}
			set
			{
				if ((this._FundID != value))
				{
					if (this._Fund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundIDChanging(value);
					this.SendPropertyChanging();
					this._FundID = value;
					this.SendPropertyChanged("FundID");
					this.OnFundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Percentage", DbType="Decimal(4,3) NOT NULL")]
		public decimal Percentage
		{
			get
			{
				return this._Percentage;
			}
			set
			{
				if ((this._Percentage != value))
				{
					this.OnPercentageChanging(value);
					this.SendPropertyChanging();
					this._Percentage = value;
					this.SendPropertyChanged("Percentage");
					this.OnPercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistributionRuleId", DbType="Int NOT NULL")]
		public int DistributionRuleId
		{
			get
			{
				return this._DistributionRuleId;
			}
			set
			{
				if ((this._DistributionRuleId != value))
				{
					if (this._DistributionRule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDistributionRuleIdChanging(value);
					this.SendPropertyChanging();
					this._DistributionRuleId = value;
					this.SendPropertyChanged("DistributionRuleId");
					this.OnDistributionRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DistributionRule_DistributionPercentage", Storage="_DistributionRule", ThisKey="DistributionRuleId", OtherKey="Id", IsForeignKey=true)]
		public DistributionRule DistributionRule
		{
			get
			{
				return this._DistributionRule.Entity;
			}
			set
			{
				DistributionRule previousValue = this._DistributionRule.Entity;
				if (((previousValue != value) 
							|| (this._DistributionRule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DistributionRule.Entity = null;
						previousValue.DistributionPercentages.Remove(this);
					}
					this._DistributionRule.Entity = value;
					if ((value != null))
					{
						value.DistributionPercentages.Add(this);
						this._DistributionRuleId = value.Id;
					}
					else
					{
						this._DistributionRuleId = default(int);
					}
					this.SendPropertyChanged("DistributionRule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fund_DistributionPercentage", Storage="_Fund", ThisKey="FundID", OtherKey="ID", IsForeignKey=true)]
		public Fund Fund
		{
			get
			{
				return this._Fund.Entity;
			}
			set
			{
				Fund previousValue = this._Fund.Entity;
				if (((previousValue != value) 
							|| (this._Fund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fund.Entity = null;
						previousValue.DistributionPercentages.Remove(this);
					}
					this._Fund.Entity = value;
					if ((value != null))
					{
						value.DistributionPercentages.Add(this);
						this._FundID = value.ID;
					}
					else
					{
						this._FundID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Fund");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reserve_DistributionPercentage", Storage="_Reserve", ThisKey="ReserveID", OtherKey="ID", IsForeignKey=true)]
		public Reserve Reserve
		{
			get
			{
				return this._Reserve.Entity;
			}
			set
			{
				Reserve previousValue = this._Reserve.Entity;
				if (((previousValue != value) 
							|| (this._Reserve.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reserve.Entity = null;
						previousValue.DistributionPercentages.Remove(this);
					}
					this._Reserve.Entity = value;
					if ((value != null))
					{
						value.DistributionPercentages.Add(this);
						this._ReserveID = value.ID;
					}
					else
					{
						this._ReserveID = default(int);
					}
					this.SendPropertyChanged("Reserve");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _Value;
		
		private int _Type;
		
		private System.DateTime _Date;
		
		private int _ReserveID;
		
		private int _FundID;
		
		private string _Origins;
		
		private System.Nullable<int> _FundOriginID;
		
		private System.Nullable<int> _ProfitId;
		
		private string _UserId;
		
		private EntityRef<Fund> _Fund;
		
		private EntityRef<Fund> _Fund1;
		
		private EntityRef<Profit> _Profit;
		
		private EntityRef<Reserve> _Reserve;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnReserveIDChanging(int value);
    partial void OnReserveIDChanged();
    partial void OnFundIDChanging(int value);
    partial void OnFundIDChanged();
    partial void OnOriginsChanging(string value);
    partial void OnOriginsChanged();
    partial void OnFundOriginIDChanging(System.Nullable<int> value);
    partial void OnFundOriginIDChanged();
    partial void OnProfitIdChanging(System.Nullable<int> value);
    partial void OnProfitIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public Transaction()
		{
			this._Fund = default(EntityRef<Fund>);
			this._Fund1 = default(EntityRef<Fund>);
			this._Profit = default(EntityRef<Profit>);
			this._Reserve = default(EntityRef<Reserve>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReserveID", DbType="Int NOT NULL")]
		public int ReserveID
		{
			get
			{
				return this._ReserveID;
			}
			set
			{
				if ((this._ReserveID != value))
				{
					if (this._Reserve.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReserveIDChanging(value);
					this.SendPropertyChanging();
					this._ReserveID = value;
					this.SendPropertyChanged("ReserveID");
					this.OnReserveIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundID", DbType="Int NOT NULL")]
		public int FundID
		{
			get
			{
				return this._FundID;
			}
			set
			{
				if ((this._FundID != value))
				{
					if (this._Fund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundIDChanging(value);
					this.SendPropertyChanging();
					this._FundID = value;
					this.SendPropertyChanged("FundID");
					this.OnFundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origins", DbType="VarChar(300)")]
		public string Origins
		{
			get
			{
				return this._Origins;
			}
			set
			{
				if ((this._Origins != value))
				{
					this.OnOriginsChanging(value);
					this.SendPropertyChanging();
					this._Origins = value;
					this.SendPropertyChanged("Origins");
					this.OnOriginsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundOriginID", DbType="Int")]
		public System.Nullable<int> FundOriginID
		{
			get
			{
				return this._FundOriginID;
			}
			set
			{
				if ((this._FundOriginID != value))
				{
					if (this._Fund1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundOriginIDChanging(value);
					this.SendPropertyChanging();
					this._FundOriginID = value;
					this.SendPropertyChanged("FundOriginID");
					this.OnFundOriginIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfitId", DbType="Int")]
		public System.Nullable<int> ProfitId
		{
			get
			{
				return this._ProfitId;
			}
			set
			{
				if ((this._ProfitId != value))
				{
					if (this._Profit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfitIdChanging(value);
					this.SendPropertyChanging();
					this._ProfitId = value;
					this.SendPropertyChanged("ProfitId");
					this.OnProfitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(50)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fund_Transaction", Storage="_Fund", ThisKey="FundID", OtherKey="ID", IsForeignKey=true)]
		public Fund Fund
		{
			get
			{
				return this._Fund.Entity;
			}
			set
			{
				Fund previousValue = this._Fund.Entity;
				if (((previousValue != value) 
							|| (this._Fund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fund.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Fund.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._FundID = value.ID;
					}
					else
					{
						this._FundID = default(int);
					}
					this.SendPropertyChanged("Fund");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fund_Transaction1", Storage="_Fund1", ThisKey="FundOriginID", OtherKey="ID", IsForeignKey=true)]
		public Fund Fund1
		{
			get
			{
				return this._Fund1.Entity;
			}
			set
			{
				Fund previousValue = this._Fund1.Entity;
				if (((previousValue != value) 
							|| (this._Fund1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fund1.Entity = null;
						previousValue.Transactions1.Remove(this);
					}
					this._Fund1.Entity = value;
					if ((value != null))
					{
						value.Transactions1.Add(this);
						this._FundOriginID = value.ID;
					}
					else
					{
						this._FundOriginID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Fund1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profit_Transaction", Storage="_Profit", ThisKey="ProfitId", OtherKey="ID", IsForeignKey=true)]
		public Profit Profit
		{
			get
			{
				return this._Profit.Entity;
			}
			set
			{
				Profit previousValue = this._Profit.Entity;
				if (((previousValue != value) 
							|| (this._Profit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profit.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Profit.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._ProfitId = value.ID;
					}
					else
					{
						this._ProfitId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Profit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reserve_Transaction", Storage="_Reserve", ThisKey="ReserveID", OtherKey="ID", IsForeignKey=true)]
		public Reserve Reserve
		{
			get
			{
				return this._Reserve.Entity;
			}
			set
			{
				Reserve previousValue = this._Reserve.Entity;
				if (((previousValue != value) 
							|| (this._Reserve.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reserve.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Reserve.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._ReserveID = value.ID;
					}
					else
					{
						this._ReserveID = default(int);
					}
					this.SendPropertyChanged("Reserve");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DistributionRule")]
	public partial class DistributionRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _UserId;
		
		private EntitySet<DistributionPercentage> _DistributionPercentages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public DistributionRule()
		{
			this._DistributionPercentages = new EntitySet<DistributionPercentage>(new Action<DistributionPercentage>(this.attach_DistributionPercentages), new Action<DistributionPercentage>(this.detach_DistributionPercentages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(50)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DistributionRule_DistributionPercentage", Storage="_DistributionPercentages", ThisKey="Id", OtherKey="DistributionRuleId")]
		public EntitySet<DistributionPercentage> DistributionPercentages
		{
			get
			{
				return this._DistributionPercentages;
			}
			set
			{
				this._DistributionPercentages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DistributionPercentages(DistributionPercentage entity)
		{
			this.SendPropertyChanging();
			entity.DistributionRule = this;
		}
		
		private void detach_DistributionPercentages(DistributionPercentage entity)
		{
			this.SendPropertyChanging();
			entity.DistributionRule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fund")]
	public partial class Fund : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _UserId;
		
		private EntitySet<DistributionPercentage> _DistributionPercentages;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<Transaction> _Transactions1;
		
		private EntitySet<Profit> _Profits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public Fund()
		{
			this._DistributionPercentages = new EntitySet<DistributionPercentage>(new Action<DistributionPercentage>(this.attach_DistributionPercentages), new Action<DistributionPercentage>(this.detach_DistributionPercentages));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Transactions1 = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions1), new Action<Transaction>(this.detach_Transactions1));
			this._Profits = new EntitySet<Profit>(new Action<Profit>(this.attach_Profits), new Action<Profit>(this.detach_Profits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(50)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fund_DistributionPercentage", Storage="_DistributionPercentages", ThisKey="ID", OtherKey="FundID")]
		public EntitySet<DistributionPercentage> DistributionPercentages
		{
			get
			{
				return this._DistributionPercentages;
			}
			set
			{
				this._DistributionPercentages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fund_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="FundID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fund_Transaction1", Storage="_Transactions1", ThisKey="ID", OtherKey="FundOriginID")]
		public EntitySet<Transaction> Transactions1
		{
			get
			{
				return this._Transactions1;
			}
			set
			{
				this._Transactions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fund_Profit", Storage="_Profits", ThisKey="ID", OtherKey="FundID")]
		public EntitySet<Profit> Profits
		{
			get
			{
				return this._Profits;
			}
			set
			{
				this._Profits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DistributionPercentages(DistributionPercentage entity)
		{
			this.SendPropertyChanging();
			entity.Fund = this;
		}
		
		private void detach_DistributionPercentages(DistributionPercentage entity)
		{
			this.SendPropertyChanging();
			entity.Fund = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Fund = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Fund = null;
		}
		
		private void attach_Transactions1(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Fund1 = this;
		}
		
		private void detach_Transactions1(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Fund1 = null;
		}
		
		private void attach_Profits(Profit entity)
		{
			this.SendPropertyChanging();
			entity.Fund = this;
		}
		
		private void detach_Profits(Profit entity)
		{
			this.SendPropertyChanging();
			entity.Fund = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Profit")]
	public partial class Profit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _Value;
		
		private System.DateTime _Date;
		
		private int _FundID;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<Fund> _Fund;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnFundIDChanging(int value);
    partial void OnFundIDChanged();
    #endregion
		
		public Profit()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Fund = default(EntityRef<Fund>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundID", DbType="Int NOT NULL")]
		public int FundID
		{
			get
			{
				return this._FundID;
			}
			set
			{
				if ((this._FundID != value))
				{
					if (this._Fund.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFundIDChanging(value);
					this.SendPropertyChanging();
					this._FundID = value;
					this.SendPropertyChanged("FundID");
					this.OnFundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profit_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="ProfitId")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fund_Profit", Storage="_Fund", ThisKey="FundID", OtherKey="ID", IsForeignKey=true)]
		public Fund Fund
		{
			get
			{
				return this._Fund.Entity;
			}
			set
			{
				Fund previousValue = this._Fund.Entity;
				if (((previousValue != value) 
							|| (this._Fund.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fund.Entity = null;
						previousValue.Profits.Remove(this);
					}
					this._Fund.Entity = value;
					if ((value != null))
					{
						value.Profits.Add(this);
						this._FundID = value.ID;
					}
					else
					{
						this._FundID = default(int);
					}
					this.SendPropertyChanged("Fund");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Profit = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Profit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reserve")]
	public partial class Reserve : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _PeriodToWithdraw;
		
		private string _TimeUnit;
		
		private string _UserId;
		
		private EntitySet<DistributionPercentage> _DistributionPercentages;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPeriodToWithdrawChanging(int value);
    partial void OnPeriodToWithdrawChanged();
    partial void OnTimeUnitChanging(string value);
    partial void OnTimeUnitChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public Reserve()
		{
			this._DistributionPercentages = new EntitySet<DistributionPercentage>(new Action<DistributionPercentage>(this.attach_DistributionPercentages), new Action<DistributionPercentage>(this.detach_DistributionPercentages));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodToWithdraw", DbType="Int NOT NULL")]
		public int PeriodToWithdraw
		{
			get
			{
				return this._PeriodToWithdraw;
			}
			set
			{
				if ((this._PeriodToWithdraw != value))
				{
					this.OnPeriodToWithdrawChanging(value);
					this.SendPropertyChanging();
					this._PeriodToWithdraw = value;
					this.SendPropertyChanged("PeriodToWithdraw");
					this.OnPeriodToWithdrawChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeUnit", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string TimeUnit
		{
			get
			{
				return this._TimeUnit;
			}
			set
			{
				if ((this._TimeUnit != value))
				{
					this.OnTimeUnitChanging(value);
					this.SendPropertyChanging();
					this._TimeUnit = value;
					this.SendPropertyChanged("TimeUnit");
					this.OnTimeUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(50)")]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reserve_DistributionPercentage", Storage="_DistributionPercentages", ThisKey="ID", OtherKey="ReserveID")]
		public EntitySet<DistributionPercentage> DistributionPercentages
		{
			get
			{
				return this._DistributionPercentages;
			}
			set
			{
				this._DistributionPercentages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reserve_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="ReserveID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DistributionPercentages(DistributionPercentage entity)
		{
			this.SendPropertyChanging();
			entity.Reserve = this;
		}
		
		private void detach_DistributionPercentages(DistributionPercentage entity)
		{
			this.SendPropertyChanging();
			entity.Reserve = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Reserve = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Reserve = null;
		}
	}
}
#pragma warning restore 1591
